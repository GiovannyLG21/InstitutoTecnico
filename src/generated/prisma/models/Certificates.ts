
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Certificates` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Certificates
 * 
 */
export type CertificatesModel = runtime.Types.Result.DefaultSelection<Prisma.$CertificatesPayload>

export type AggregateCertificates = {
  _count: CertificatesCountAggregateOutputType | null
  _min: CertificatesMinAggregateOutputType | null
  _max: CertificatesMaxAggregateOutputType | null
}

export type CertificatesMinAggregateOutputType = {
  id: string | null
  names: string | null
  document: string | null
  documentType: string | null
  phone: string | null
  email: string | null
  graduationProgram: string | null
  graduationYear: string | null
  requestReason: string | null
}

export type CertificatesMaxAggregateOutputType = {
  id: string | null
  names: string | null
  document: string | null
  documentType: string | null
  phone: string | null
  email: string | null
  graduationProgram: string | null
  graduationYear: string | null
  requestReason: string | null
}

export type CertificatesCountAggregateOutputType = {
  id: number
  names: number
  document: number
  documentType: number
  phone: number
  email: number
  graduationProgram: number
  graduationYear: number
  requestReason: number
  _all: number
}


export type CertificatesMinAggregateInputType = {
  id?: true
  names?: true
  document?: true
  documentType?: true
  phone?: true
  email?: true
  graduationProgram?: true
  graduationYear?: true
  requestReason?: true
}

export type CertificatesMaxAggregateInputType = {
  id?: true
  names?: true
  document?: true
  documentType?: true
  phone?: true
  email?: true
  graduationProgram?: true
  graduationYear?: true
  requestReason?: true
}

export type CertificatesCountAggregateInputType = {
  id?: true
  names?: true
  document?: true
  documentType?: true
  phone?: true
  email?: true
  graduationProgram?: true
  graduationYear?: true
  requestReason?: true
  _all?: true
}

export type CertificatesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Certificates to aggregate.
   */
  where?: Prisma.CertificatesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Certificates to fetch.
   */
  orderBy?: Prisma.CertificatesOrderByWithRelationInput | Prisma.CertificatesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CertificatesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Certificates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Certificates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Certificates
  **/
  _count?: true | CertificatesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CertificatesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CertificatesMaxAggregateInputType
}

export type GetCertificatesAggregateType<T extends CertificatesAggregateArgs> = {
      [P in keyof T & keyof AggregateCertificates]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCertificates[P]>
    : Prisma.GetScalarType<T[P], AggregateCertificates[P]>
}




export type CertificatesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CertificatesWhereInput
  orderBy?: Prisma.CertificatesOrderByWithAggregationInput | Prisma.CertificatesOrderByWithAggregationInput[]
  by: Prisma.CertificatesScalarFieldEnum[] | Prisma.CertificatesScalarFieldEnum
  having?: Prisma.CertificatesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CertificatesCountAggregateInputType | true
  _min?: CertificatesMinAggregateInputType
  _max?: CertificatesMaxAggregateInputType
}

export type CertificatesGroupByOutputType = {
  id: string
  names: string
  document: string
  documentType: string
  phone: string
  email: string
  graduationProgram: string
  graduationYear: string
  requestReason: string
  _count: CertificatesCountAggregateOutputType | null
  _min: CertificatesMinAggregateOutputType | null
  _max: CertificatesMaxAggregateOutputType | null
}

type GetCertificatesGroupByPayload<T extends CertificatesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CertificatesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CertificatesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CertificatesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CertificatesGroupByOutputType[P]>
      }
    >
  >



export type CertificatesWhereInput = {
  AND?: Prisma.CertificatesWhereInput | Prisma.CertificatesWhereInput[]
  OR?: Prisma.CertificatesWhereInput[]
  NOT?: Prisma.CertificatesWhereInput | Prisma.CertificatesWhereInput[]
  id?: Prisma.StringFilter<"Certificates"> | string
  names?: Prisma.StringFilter<"Certificates"> | string
  document?: Prisma.StringFilter<"Certificates"> | string
  documentType?: Prisma.StringFilter<"Certificates"> | string
  phone?: Prisma.StringFilter<"Certificates"> | string
  email?: Prisma.StringFilter<"Certificates"> | string
  graduationProgram?: Prisma.StringFilter<"Certificates"> | string
  graduationYear?: Prisma.StringFilter<"Certificates"> | string
  requestReason?: Prisma.StringFilter<"Certificates"> | string
}

export type CertificatesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  graduationProgram?: Prisma.SortOrder
  graduationYear?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
}

export type CertificatesWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CertificatesWhereInput | Prisma.CertificatesWhereInput[]
  OR?: Prisma.CertificatesWhereInput[]
  NOT?: Prisma.CertificatesWhereInput | Prisma.CertificatesWhereInput[]
  names?: Prisma.StringFilter<"Certificates"> | string
  document?: Prisma.StringFilter<"Certificates"> | string
  documentType?: Prisma.StringFilter<"Certificates"> | string
  phone?: Prisma.StringFilter<"Certificates"> | string
  email?: Prisma.StringFilter<"Certificates"> | string
  graduationProgram?: Prisma.StringFilter<"Certificates"> | string
  graduationYear?: Prisma.StringFilter<"Certificates"> | string
  requestReason?: Prisma.StringFilter<"Certificates"> | string
}, "id">

export type CertificatesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  graduationProgram?: Prisma.SortOrder
  graduationYear?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
  _count?: Prisma.CertificatesCountOrderByAggregateInput
  _max?: Prisma.CertificatesMaxOrderByAggregateInput
  _min?: Prisma.CertificatesMinOrderByAggregateInput
}

export type CertificatesScalarWhereWithAggregatesInput = {
  AND?: Prisma.CertificatesScalarWhereWithAggregatesInput | Prisma.CertificatesScalarWhereWithAggregatesInput[]
  OR?: Prisma.CertificatesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CertificatesScalarWhereWithAggregatesInput | Prisma.CertificatesScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Certificates"> | string
  names?: Prisma.StringWithAggregatesFilter<"Certificates"> | string
  document?: Prisma.StringWithAggregatesFilter<"Certificates"> | string
  documentType?: Prisma.StringWithAggregatesFilter<"Certificates"> | string
  phone?: Prisma.StringWithAggregatesFilter<"Certificates"> | string
  email?: Prisma.StringWithAggregatesFilter<"Certificates"> | string
  graduationProgram?: Prisma.StringWithAggregatesFilter<"Certificates"> | string
  graduationYear?: Prisma.StringWithAggregatesFilter<"Certificates"> | string
  requestReason?: Prisma.StringWithAggregatesFilter<"Certificates"> | string
}

export type CertificatesCreateInput = {
  id?: string
  names: string
  document: string
  documentType: string
  phone: string
  email: string
  graduationProgram: string
  graduationYear: string
  requestReason: string
}

export type CertificatesUncheckedCreateInput = {
  id?: string
  names: string
  document: string
  documentType: string
  phone: string
  email: string
  graduationProgram: string
  graduationYear: string
  requestReason: string
}

export type CertificatesUpdateInput = {
  names?: Prisma.StringFieldUpdateOperationsInput | string
  document?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  graduationProgram?: Prisma.StringFieldUpdateOperationsInput | string
  graduationYear?: Prisma.StringFieldUpdateOperationsInput | string
  requestReason?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CertificatesUncheckedUpdateInput = {
  names?: Prisma.StringFieldUpdateOperationsInput | string
  document?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  graduationProgram?: Prisma.StringFieldUpdateOperationsInput | string
  graduationYear?: Prisma.StringFieldUpdateOperationsInput | string
  requestReason?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CertificatesCreateManyInput = {
  id?: string
  names: string
  document: string
  documentType: string
  phone: string
  email: string
  graduationProgram: string
  graduationYear: string
  requestReason: string
}

export type CertificatesUpdateManyMutationInput = {
  names?: Prisma.StringFieldUpdateOperationsInput | string
  document?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  graduationProgram?: Prisma.StringFieldUpdateOperationsInput | string
  graduationYear?: Prisma.StringFieldUpdateOperationsInput | string
  requestReason?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CertificatesUncheckedUpdateManyInput = {
  names?: Prisma.StringFieldUpdateOperationsInput | string
  document?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  graduationProgram?: Prisma.StringFieldUpdateOperationsInput | string
  graduationYear?: Prisma.StringFieldUpdateOperationsInput | string
  requestReason?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CertificatesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  graduationProgram?: Prisma.SortOrder
  graduationYear?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
}

export type CertificatesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  graduationProgram?: Prisma.SortOrder
  graduationYear?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
}

export type CertificatesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  graduationProgram?: Prisma.SortOrder
  graduationYear?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
}



export type CertificatesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  names?: boolean
  document?: boolean
  documentType?: boolean
  phone?: boolean
  email?: boolean
  graduationProgram?: boolean
  graduationYear?: boolean
  requestReason?: boolean
}, ExtArgs["result"]["certificates"]>



export type CertificatesSelectScalar = {
  id?: boolean
  names?: boolean
  document?: boolean
  documentType?: boolean
  phone?: boolean
  email?: boolean
  graduationProgram?: boolean
  graduationYear?: boolean
  requestReason?: boolean
}

export type CertificatesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "names" | "document" | "documentType" | "phone" | "email" | "graduationProgram" | "graduationYear" | "requestReason", ExtArgs["result"]["certificates"]>

export type $CertificatesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Certificates"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    names: string
    document: string
    documentType: string
    phone: string
    email: string
    graduationProgram: string
    graduationYear: string
    requestReason: string
  }, ExtArgs["result"]["certificates"]>
  composites: {}
}

export type CertificatesGetPayload<S extends boolean | null | undefined | CertificatesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CertificatesPayload, S>

export type CertificatesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CertificatesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CertificatesCountAggregateInputType | true
  }

export interface CertificatesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Certificates'], meta: { name: 'Certificates' } }
  /**
   * Find zero or one Certificates that matches the filter.
   * @param {CertificatesFindUniqueArgs} args - Arguments to find a Certificates
   * @example
   * // Get one Certificates
   * const certificates = await prisma.certificates.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CertificatesFindUniqueArgs>(args: Prisma.SelectSubset<T, CertificatesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CertificatesClient<runtime.Types.Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Certificates that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CertificatesFindUniqueOrThrowArgs} args - Arguments to find a Certificates
   * @example
   * // Get one Certificates
   * const certificates = await prisma.certificates.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CertificatesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CertificatesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CertificatesClient<runtime.Types.Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Certificates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificatesFindFirstArgs} args - Arguments to find a Certificates
   * @example
   * // Get one Certificates
   * const certificates = await prisma.certificates.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CertificatesFindFirstArgs>(args?: Prisma.SelectSubset<T, CertificatesFindFirstArgs<ExtArgs>>): Prisma.Prisma__CertificatesClient<runtime.Types.Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Certificates that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificatesFindFirstOrThrowArgs} args - Arguments to find a Certificates
   * @example
   * // Get one Certificates
   * const certificates = await prisma.certificates.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CertificatesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CertificatesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CertificatesClient<runtime.Types.Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Certificates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificatesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Certificates
   * const certificates = await prisma.certificates.findMany()
   * 
   * // Get first 10 Certificates
   * const certificates = await prisma.certificates.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const certificatesWithIdOnly = await prisma.certificates.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CertificatesFindManyArgs>(args?: Prisma.SelectSubset<T, CertificatesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Certificates.
   * @param {CertificatesCreateArgs} args - Arguments to create a Certificates.
   * @example
   * // Create one Certificates
   * const Certificates = await prisma.certificates.create({
   *   data: {
   *     // ... data to create a Certificates
   *   }
   * })
   * 
   */
  create<T extends CertificatesCreateArgs>(args: Prisma.SelectSubset<T, CertificatesCreateArgs<ExtArgs>>): Prisma.Prisma__CertificatesClient<runtime.Types.Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Certificates.
   * @param {CertificatesCreateManyArgs} args - Arguments to create many Certificates.
   * @example
   * // Create many Certificates
   * const certificates = await prisma.certificates.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CertificatesCreateManyArgs>(args?: Prisma.SelectSubset<T, CertificatesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Certificates.
   * @param {CertificatesDeleteArgs} args - Arguments to delete one Certificates.
   * @example
   * // Delete one Certificates
   * const Certificates = await prisma.certificates.delete({
   *   where: {
   *     // ... filter to delete one Certificates
   *   }
   * })
   * 
   */
  delete<T extends CertificatesDeleteArgs>(args: Prisma.SelectSubset<T, CertificatesDeleteArgs<ExtArgs>>): Prisma.Prisma__CertificatesClient<runtime.Types.Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Certificates.
   * @param {CertificatesUpdateArgs} args - Arguments to update one Certificates.
   * @example
   * // Update one Certificates
   * const certificates = await prisma.certificates.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CertificatesUpdateArgs>(args: Prisma.SelectSubset<T, CertificatesUpdateArgs<ExtArgs>>): Prisma.Prisma__CertificatesClient<runtime.Types.Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Certificates.
   * @param {CertificatesDeleteManyArgs} args - Arguments to filter Certificates to delete.
   * @example
   * // Delete a few Certificates
   * const { count } = await prisma.certificates.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CertificatesDeleteManyArgs>(args?: Prisma.SelectSubset<T, CertificatesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Certificates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificatesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Certificates
   * const certificates = await prisma.certificates.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CertificatesUpdateManyArgs>(args: Prisma.SelectSubset<T, CertificatesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Certificates.
   * @param {CertificatesUpsertArgs} args - Arguments to update or create a Certificates.
   * @example
   * // Update or create a Certificates
   * const certificates = await prisma.certificates.upsert({
   *   create: {
   *     // ... data to create a Certificates
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Certificates we want to update
   *   }
   * })
   */
  upsert<T extends CertificatesUpsertArgs>(args: Prisma.SelectSubset<T, CertificatesUpsertArgs<ExtArgs>>): Prisma.Prisma__CertificatesClient<runtime.Types.Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Certificates that matches the filter.
   * @param {CertificatesFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const certificates = await prisma.certificates.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.CertificatesFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Certificates.
   * @param {CertificatesAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const certificates = await prisma.certificates.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.CertificatesAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Certificates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificatesCountArgs} args - Arguments to filter Certificates to count.
   * @example
   * // Count the number of Certificates
   * const count = await prisma.certificates.count({
   *   where: {
   *     // ... the filter for the Certificates we want to count
   *   }
   * })
  **/
  count<T extends CertificatesCountArgs>(
    args?: Prisma.Subset<T, CertificatesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CertificatesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Certificates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificatesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CertificatesAggregateArgs>(args: Prisma.Subset<T, CertificatesAggregateArgs>): Prisma.PrismaPromise<GetCertificatesAggregateType<T>>

  /**
   * Group by Certificates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificatesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CertificatesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CertificatesGroupByArgs['orderBy'] }
      : { orderBy?: CertificatesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CertificatesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificatesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Certificates model
 */
readonly fields: CertificatesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Certificates.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CertificatesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Certificates model
 */
export interface CertificatesFieldRefs {
  readonly id: Prisma.FieldRef<"Certificates", 'String'>
  readonly names: Prisma.FieldRef<"Certificates", 'String'>
  readonly document: Prisma.FieldRef<"Certificates", 'String'>
  readonly documentType: Prisma.FieldRef<"Certificates", 'String'>
  readonly phone: Prisma.FieldRef<"Certificates", 'String'>
  readonly email: Prisma.FieldRef<"Certificates", 'String'>
  readonly graduationProgram: Prisma.FieldRef<"Certificates", 'String'>
  readonly graduationYear: Prisma.FieldRef<"Certificates", 'String'>
  readonly requestReason: Prisma.FieldRef<"Certificates", 'String'>
}
    

// Custom InputTypes
/**
 * Certificates findUnique
 */
export type CertificatesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certificates
   */
  select?: Prisma.CertificatesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certificates
   */
  omit?: Prisma.CertificatesOmit<ExtArgs> | null
  /**
   * Filter, which Certificates to fetch.
   */
  where: Prisma.CertificatesWhereUniqueInput
}

/**
 * Certificates findUniqueOrThrow
 */
export type CertificatesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certificates
   */
  select?: Prisma.CertificatesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certificates
   */
  omit?: Prisma.CertificatesOmit<ExtArgs> | null
  /**
   * Filter, which Certificates to fetch.
   */
  where: Prisma.CertificatesWhereUniqueInput
}

/**
 * Certificates findFirst
 */
export type CertificatesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certificates
   */
  select?: Prisma.CertificatesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certificates
   */
  omit?: Prisma.CertificatesOmit<ExtArgs> | null
  /**
   * Filter, which Certificates to fetch.
   */
  where?: Prisma.CertificatesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Certificates to fetch.
   */
  orderBy?: Prisma.CertificatesOrderByWithRelationInput | Prisma.CertificatesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Certificates.
   */
  cursor?: Prisma.CertificatesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Certificates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Certificates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Certificates.
   */
  distinct?: Prisma.CertificatesScalarFieldEnum | Prisma.CertificatesScalarFieldEnum[]
}

/**
 * Certificates findFirstOrThrow
 */
export type CertificatesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certificates
   */
  select?: Prisma.CertificatesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certificates
   */
  omit?: Prisma.CertificatesOmit<ExtArgs> | null
  /**
   * Filter, which Certificates to fetch.
   */
  where?: Prisma.CertificatesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Certificates to fetch.
   */
  orderBy?: Prisma.CertificatesOrderByWithRelationInput | Prisma.CertificatesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Certificates.
   */
  cursor?: Prisma.CertificatesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Certificates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Certificates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Certificates.
   */
  distinct?: Prisma.CertificatesScalarFieldEnum | Prisma.CertificatesScalarFieldEnum[]
}

/**
 * Certificates findMany
 */
export type CertificatesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certificates
   */
  select?: Prisma.CertificatesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certificates
   */
  omit?: Prisma.CertificatesOmit<ExtArgs> | null
  /**
   * Filter, which Certificates to fetch.
   */
  where?: Prisma.CertificatesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Certificates to fetch.
   */
  orderBy?: Prisma.CertificatesOrderByWithRelationInput | Prisma.CertificatesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Certificates.
   */
  cursor?: Prisma.CertificatesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Certificates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Certificates.
   */
  skip?: number
  distinct?: Prisma.CertificatesScalarFieldEnum | Prisma.CertificatesScalarFieldEnum[]
}

/**
 * Certificates create
 */
export type CertificatesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certificates
   */
  select?: Prisma.CertificatesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certificates
   */
  omit?: Prisma.CertificatesOmit<ExtArgs> | null
  /**
   * The data needed to create a Certificates.
   */
  data: Prisma.XOR<Prisma.CertificatesCreateInput, Prisma.CertificatesUncheckedCreateInput>
}

/**
 * Certificates createMany
 */
export type CertificatesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Certificates.
   */
  data: Prisma.CertificatesCreateManyInput | Prisma.CertificatesCreateManyInput[]
}

/**
 * Certificates update
 */
export type CertificatesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certificates
   */
  select?: Prisma.CertificatesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certificates
   */
  omit?: Prisma.CertificatesOmit<ExtArgs> | null
  /**
   * The data needed to update a Certificates.
   */
  data: Prisma.XOR<Prisma.CertificatesUpdateInput, Prisma.CertificatesUncheckedUpdateInput>
  /**
   * Choose, which Certificates to update.
   */
  where: Prisma.CertificatesWhereUniqueInput
}

/**
 * Certificates updateMany
 */
export type CertificatesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Certificates.
   */
  data: Prisma.XOR<Prisma.CertificatesUpdateManyMutationInput, Prisma.CertificatesUncheckedUpdateManyInput>
  /**
   * Filter which Certificates to update
   */
  where?: Prisma.CertificatesWhereInput
  /**
   * Limit how many Certificates to update.
   */
  limit?: number
}

/**
 * Certificates upsert
 */
export type CertificatesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certificates
   */
  select?: Prisma.CertificatesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certificates
   */
  omit?: Prisma.CertificatesOmit<ExtArgs> | null
  /**
   * The filter to search for the Certificates to update in case it exists.
   */
  where: Prisma.CertificatesWhereUniqueInput
  /**
   * In case the Certificates found by the `where` argument doesn't exist, create a new Certificates with this data.
   */
  create: Prisma.XOR<Prisma.CertificatesCreateInput, Prisma.CertificatesUncheckedCreateInput>
  /**
   * In case the Certificates was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CertificatesUpdateInput, Prisma.CertificatesUncheckedUpdateInput>
}

/**
 * Certificates delete
 */
export type CertificatesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certificates
   */
  select?: Prisma.CertificatesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certificates
   */
  omit?: Prisma.CertificatesOmit<ExtArgs> | null
  /**
   * Filter which Certificates to delete.
   */
  where: Prisma.CertificatesWhereUniqueInput
}

/**
 * Certificates deleteMany
 */
export type CertificatesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Certificates to delete
   */
  where?: Prisma.CertificatesWhereInput
  /**
   * Limit how many Certificates to delete.
   */
  limit?: number
}

/**
 * Certificates findRaw
 */
export type CertificatesFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Certificates aggregateRaw
 */
export type CertificatesAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Certificates without action
 */
export type CertificatesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certificates
   */
  select?: Prisma.CertificatesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certificates
   */
  omit?: Prisma.CertificatesOmit<ExtArgs> | null
}
