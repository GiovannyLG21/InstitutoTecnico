
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Appointments` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Appointments
 * 
 */
export type AppointmentsModel = runtime.Types.Result.DefaultSelection<Prisma.$AppointmentsPayload>

export type AggregateAppointments = {
  _count: AppointmentsCountAggregateOutputType | null
  _min: AppointmentsMinAggregateOutputType | null
  _max: AppointmentsMaxAggregateOutputType | null
}

export type AppointmentsMinAggregateOutputType = {
  id: string | null
  names: string | null
  document: string | null
  documentType: string | null
  phone: string | null
  email: string | null
  subject: string | null
  date: string | null
  hour: string | null
  requestReason: string | null
}

export type AppointmentsMaxAggregateOutputType = {
  id: string | null
  names: string | null
  document: string | null
  documentType: string | null
  phone: string | null
  email: string | null
  subject: string | null
  date: string | null
  hour: string | null
  requestReason: string | null
}

export type AppointmentsCountAggregateOutputType = {
  id: number
  names: number
  document: number
  documentType: number
  phone: number
  email: number
  subject: number
  date: number
  hour: number
  requestReason: number
  _all: number
}


export type AppointmentsMinAggregateInputType = {
  id?: true
  names?: true
  document?: true
  documentType?: true
  phone?: true
  email?: true
  subject?: true
  date?: true
  hour?: true
  requestReason?: true
}

export type AppointmentsMaxAggregateInputType = {
  id?: true
  names?: true
  document?: true
  documentType?: true
  phone?: true
  email?: true
  subject?: true
  date?: true
  hour?: true
  requestReason?: true
}

export type AppointmentsCountAggregateInputType = {
  id?: true
  names?: true
  document?: true
  documentType?: true
  phone?: true
  email?: true
  subject?: true
  date?: true
  hour?: true
  requestReason?: true
  _all?: true
}

export type AppointmentsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Appointments to aggregate.
   */
  where?: Prisma.AppointmentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Appointments to fetch.
   */
  orderBy?: Prisma.AppointmentsOrderByWithRelationInput | Prisma.AppointmentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AppointmentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Appointments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Appointments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Appointments
  **/
  _count?: true | AppointmentsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AppointmentsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AppointmentsMaxAggregateInputType
}

export type GetAppointmentsAggregateType<T extends AppointmentsAggregateArgs> = {
      [P in keyof T & keyof AggregateAppointments]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAppointments[P]>
    : Prisma.GetScalarType<T[P], AggregateAppointments[P]>
}




export type AppointmentsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AppointmentsWhereInput
  orderBy?: Prisma.AppointmentsOrderByWithAggregationInput | Prisma.AppointmentsOrderByWithAggregationInput[]
  by: Prisma.AppointmentsScalarFieldEnum[] | Prisma.AppointmentsScalarFieldEnum
  having?: Prisma.AppointmentsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AppointmentsCountAggregateInputType | true
  _min?: AppointmentsMinAggregateInputType
  _max?: AppointmentsMaxAggregateInputType
}

export type AppointmentsGroupByOutputType = {
  id: string
  names: string
  document: string
  documentType: string
  phone: string
  email: string
  subject: string
  date: string
  hour: string
  requestReason: string
  _count: AppointmentsCountAggregateOutputType | null
  _min: AppointmentsMinAggregateOutputType | null
  _max: AppointmentsMaxAggregateOutputType | null
}

type GetAppointmentsGroupByPayload<T extends AppointmentsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AppointmentsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AppointmentsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AppointmentsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AppointmentsGroupByOutputType[P]>
      }
    >
  >



export type AppointmentsWhereInput = {
  AND?: Prisma.AppointmentsWhereInput | Prisma.AppointmentsWhereInput[]
  OR?: Prisma.AppointmentsWhereInput[]
  NOT?: Prisma.AppointmentsWhereInput | Prisma.AppointmentsWhereInput[]
  id?: Prisma.StringFilter<"Appointments"> | string
  names?: Prisma.StringFilter<"Appointments"> | string
  document?: Prisma.StringFilter<"Appointments"> | string
  documentType?: Prisma.StringFilter<"Appointments"> | string
  phone?: Prisma.StringFilter<"Appointments"> | string
  email?: Prisma.StringFilter<"Appointments"> | string
  subject?: Prisma.StringFilter<"Appointments"> | string
  date?: Prisma.StringFilter<"Appointments"> | string
  hour?: Prisma.StringFilter<"Appointments"> | string
  requestReason?: Prisma.StringFilter<"Appointments"> | string
}

export type AppointmentsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  date?: Prisma.SortOrder
  hour?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
}

export type AppointmentsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AppointmentsWhereInput | Prisma.AppointmentsWhereInput[]
  OR?: Prisma.AppointmentsWhereInput[]
  NOT?: Prisma.AppointmentsWhereInput | Prisma.AppointmentsWhereInput[]
  names?: Prisma.StringFilter<"Appointments"> | string
  document?: Prisma.StringFilter<"Appointments"> | string
  documentType?: Prisma.StringFilter<"Appointments"> | string
  phone?: Prisma.StringFilter<"Appointments"> | string
  email?: Prisma.StringFilter<"Appointments"> | string
  subject?: Prisma.StringFilter<"Appointments"> | string
  date?: Prisma.StringFilter<"Appointments"> | string
  hour?: Prisma.StringFilter<"Appointments"> | string
  requestReason?: Prisma.StringFilter<"Appointments"> | string
}, "id">

export type AppointmentsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  date?: Prisma.SortOrder
  hour?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
  _count?: Prisma.AppointmentsCountOrderByAggregateInput
  _max?: Prisma.AppointmentsMaxOrderByAggregateInput
  _min?: Prisma.AppointmentsMinOrderByAggregateInput
}

export type AppointmentsScalarWhereWithAggregatesInput = {
  AND?: Prisma.AppointmentsScalarWhereWithAggregatesInput | Prisma.AppointmentsScalarWhereWithAggregatesInput[]
  OR?: Prisma.AppointmentsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AppointmentsScalarWhereWithAggregatesInput | Prisma.AppointmentsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Appointments"> | string
  names?: Prisma.StringWithAggregatesFilter<"Appointments"> | string
  document?: Prisma.StringWithAggregatesFilter<"Appointments"> | string
  documentType?: Prisma.StringWithAggregatesFilter<"Appointments"> | string
  phone?: Prisma.StringWithAggregatesFilter<"Appointments"> | string
  email?: Prisma.StringWithAggregatesFilter<"Appointments"> | string
  subject?: Prisma.StringWithAggregatesFilter<"Appointments"> | string
  date?: Prisma.StringWithAggregatesFilter<"Appointments"> | string
  hour?: Prisma.StringWithAggregatesFilter<"Appointments"> | string
  requestReason?: Prisma.StringWithAggregatesFilter<"Appointments"> | string
}

export type AppointmentsCreateInput = {
  id?: string
  names: string
  document: string
  documentType: string
  phone: string
  email: string
  subject: string
  date: string
  hour: string
  requestReason: string
}

export type AppointmentsUncheckedCreateInput = {
  id?: string
  names: string
  document: string
  documentType: string
  phone: string
  email: string
  subject: string
  date: string
  hour: string
  requestReason: string
}

export type AppointmentsUpdateInput = {
  names?: Prisma.StringFieldUpdateOperationsInput | string
  document?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  hour?: Prisma.StringFieldUpdateOperationsInput | string
  requestReason?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppointmentsUncheckedUpdateInput = {
  names?: Prisma.StringFieldUpdateOperationsInput | string
  document?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  hour?: Prisma.StringFieldUpdateOperationsInput | string
  requestReason?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppointmentsCreateManyInput = {
  id?: string
  names: string
  document: string
  documentType: string
  phone: string
  email: string
  subject: string
  date: string
  hour: string
  requestReason: string
}

export type AppointmentsUpdateManyMutationInput = {
  names?: Prisma.StringFieldUpdateOperationsInput | string
  document?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  hour?: Prisma.StringFieldUpdateOperationsInput | string
  requestReason?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppointmentsUncheckedUpdateManyInput = {
  names?: Prisma.StringFieldUpdateOperationsInput | string
  document?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  hour?: Prisma.StringFieldUpdateOperationsInput | string
  requestReason?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppointmentsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  date?: Prisma.SortOrder
  hour?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
}

export type AppointmentsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  date?: Prisma.SortOrder
  hour?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
}

export type AppointmentsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  date?: Prisma.SortOrder
  hour?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
}



export type AppointmentsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  names?: boolean
  document?: boolean
  documentType?: boolean
  phone?: boolean
  email?: boolean
  subject?: boolean
  date?: boolean
  hour?: boolean
  requestReason?: boolean
}, ExtArgs["result"]["appointments"]>



export type AppointmentsSelectScalar = {
  id?: boolean
  names?: boolean
  document?: boolean
  documentType?: boolean
  phone?: boolean
  email?: boolean
  subject?: boolean
  date?: boolean
  hour?: boolean
  requestReason?: boolean
}

export type AppointmentsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "names" | "document" | "documentType" | "phone" | "email" | "subject" | "date" | "hour" | "requestReason", ExtArgs["result"]["appointments"]>

export type $AppointmentsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Appointments"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    names: string
    document: string
    documentType: string
    phone: string
    email: string
    subject: string
    date: string
    hour: string
    requestReason: string
  }, ExtArgs["result"]["appointments"]>
  composites: {}
}

export type AppointmentsGetPayload<S extends boolean | null | undefined | AppointmentsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AppointmentsPayload, S>

export type AppointmentsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AppointmentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AppointmentsCountAggregateInputType | true
  }

export interface AppointmentsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointments'], meta: { name: 'Appointments' } }
  /**
   * Find zero or one Appointments that matches the filter.
   * @param {AppointmentsFindUniqueArgs} args - Arguments to find a Appointments
   * @example
   * // Get one Appointments
   * const appointments = await prisma.appointments.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AppointmentsFindUniqueArgs>(args: Prisma.SelectSubset<T, AppointmentsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AppointmentsClient<runtime.Types.Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Appointments that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AppointmentsFindUniqueOrThrowArgs} args - Arguments to find a Appointments
   * @example
   * // Get one Appointments
   * const appointments = await prisma.appointments.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AppointmentsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AppointmentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AppointmentsClient<runtime.Types.Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Appointments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentsFindFirstArgs} args - Arguments to find a Appointments
   * @example
   * // Get one Appointments
   * const appointments = await prisma.appointments.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AppointmentsFindFirstArgs>(args?: Prisma.SelectSubset<T, AppointmentsFindFirstArgs<ExtArgs>>): Prisma.Prisma__AppointmentsClient<runtime.Types.Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Appointments that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentsFindFirstOrThrowArgs} args - Arguments to find a Appointments
   * @example
   * // Get one Appointments
   * const appointments = await prisma.appointments.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AppointmentsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AppointmentsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AppointmentsClient<runtime.Types.Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Appointments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Appointments
   * const appointments = await prisma.appointments.findMany()
   * 
   * // Get first 10 Appointments
   * const appointments = await prisma.appointments.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const appointmentsWithIdOnly = await prisma.appointments.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AppointmentsFindManyArgs>(args?: Prisma.SelectSubset<T, AppointmentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Appointments.
   * @param {AppointmentsCreateArgs} args - Arguments to create a Appointments.
   * @example
   * // Create one Appointments
   * const Appointments = await prisma.appointments.create({
   *   data: {
   *     // ... data to create a Appointments
   *   }
   * })
   * 
   */
  create<T extends AppointmentsCreateArgs>(args: Prisma.SelectSubset<T, AppointmentsCreateArgs<ExtArgs>>): Prisma.Prisma__AppointmentsClient<runtime.Types.Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Appointments.
   * @param {AppointmentsCreateManyArgs} args - Arguments to create many Appointments.
   * @example
   * // Create many Appointments
   * const appointments = await prisma.appointments.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AppointmentsCreateManyArgs>(args?: Prisma.SelectSubset<T, AppointmentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Appointments.
   * @param {AppointmentsDeleteArgs} args - Arguments to delete one Appointments.
   * @example
   * // Delete one Appointments
   * const Appointments = await prisma.appointments.delete({
   *   where: {
   *     // ... filter to delete one Appointments
   *   }
   * })
   * 
   */
  delete<T extends AppointmentsDeleteArgs>(args: Prisma.SelectSubset<T, AppointmentsDeleteArgs<ExtArgs>>): Prisma.Prisma__AppointmentsClient<runtime.Types.Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Appointments.
   * @param {AppointmentsUpdateArgs} args - Arguments to update one Appointments.
   * @example
   * // Update one Appointments
   * const appointments = await prisma.appointments.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AppointmentsUpdateArgs>(args: Prisma.SelectSubset<T, AppointmentsUpdateArgs<ExtArgs>>): Prisma.Prisma__AppointmentsClient<runtime.Types.Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Appointments.
   * @param {AppointmentsDeleteManyArgs} args - Arguments to filter Appointments to delete.
   * @example
   * // Delete a few Appointments
   * const { count } = await prisma.appointments.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AppointmentsDeleteManyArgs>(args?: Prisma.SelectSubset<T, AppointmentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Appointments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Appointments
   * const appointments = await prisma.appointments.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AppointmentsUpdateManyArgs>(args: Prisma.SelectSubset<T, AppointmentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Appointments.
   * @param {AppointmentsUpsertArgs} args - Arguments to update or create a Appointments.
   * @example
   * // Update or create a Appointments
   * const appointments = await prisma.appointments.upsert({
   *   create: {
   *     // ... data to create a Appointments
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Appointments we want to update
   *   }
   * })
   */
  upsert<T extends AppointmentsUpsertArgs>(args: Prisma.SelectSubset<T, AppointmentsUpsertArgs<ExtArgs>>): Prisma.Prisma__AppointmentsClient<runtime.Types.Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Appointments that matches the filter.
   * @param {AppointmentsFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const appointments = await prisma.appointments.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.AppointmentsFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Appointments.
   * @param {AppointmentsAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const appointments = await prisma.appointments.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.AppointmentsAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Appointments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentsCountArgs} args - Arguments to filter Appointments to count.
   * @example
   * // Count the number of Appointments
   * const count = await prisma.appointments.count({
   *   where: {
   *     // ... the filter for the Appointments we want to count
   *   }
   * })
  **/
  count<T extends AppointmentsCountArgs>(
    args?: Prisma.Subset<T, AppointmentsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AppointmentsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Appointments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AppointmentsAggregateArgs>(args: Prisma.Subset<T, AppointmentsAggregateArgs>): Prisma.PrismaPromise<GetAppointmentsAggregateType<T>>

  /**
   * Group by Appointments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AppointmentsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AppointmentsGroupByArgs['orderBy'] }
      : { orderBy?: AppointmentsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AppointmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Appointments model
 */
readonly fields: AppointmentsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Appointments.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AppointmentsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Appointments model
 */
export interface AppointmentsFieldRefs {
  readonly id: Prisma.FieldRef<"Appointments", 'String'>
  readonly names: Prisma.FieldRef<"Appointments", 'String'>
  readonly document: Prisma.FieldRef<"Appointments", 'String'>
  readonly documentType: Prisma.FieldRef<"Appointments", 'String'>
  readonly phone: Prisma.FieldRef<"Appointments", 'String'>
  readonly email: Prisma.FieldRef<"Appointments", 'String'>
  readonly subject: Prisma.FieldRef<"Appointments", 'String'>
  readonly date: Prisma.FieldRef<"Appointments", 'String'>
  readonly hour: Prisma.FieldRef<"Appointments", 'String'>
  readonly requestReason: Prisma.FieldRef<"Appointments", 'String'>
}
    

// Custom InputTypes
/**
 * Appointments findUnique
 */
export type AppointmentsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointments
   */
  select?: Prisma.AppointmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointments
   */
  omit?: Prisma.AppointmentsOmit<ExtArgs> | null
  /**
   * Filter, which Appointments to fetch.
   */
  where: Prisma.AppointmentsWhereUniqueInput
}

/**
 * Appointments findUniqueOrThrow
 */
export type AppointmentsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointments
   */
  select?: Prisma.AppointmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointments
   */
  omit?: Prisma.AppointmentsOmit<ExtArgs> | null
  /**
   * Filter, which Appointments to fetch.
   */
  where: Prisma.AppointmentsWhereUniqueInput
}

/**
 * Appointments findFirst
 */
export type AppointmentsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointments
   */
  select?: Prisma.AppointmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointments
   */
  omit?: Prisma.AppointmentsOmit<ExtArgs> | null
  /**
   * Filter, which Appointments to fetch.
   */
  where?: Prisma.AppointmentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Appointments to fetch.
   */
  orderBy?: Prisma.AppointmentsOrderByWithRelationInput | Prisma.AppointmentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Appointments.
   */
  cursor?: Prisma.AppointmentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Appointments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Appointments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Appointments.
   */
  distinct?: Prisma.AppointmentsScalarFieldEnum | Prisma.AppointmentsScalarFieldEnum[]
}

/**
 * Appointments findFirstOrThrow
 */
export type AppointmentsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointments
   */
  select?: Prisma.AppointmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointments
   */
  omit?: Prisma.AppointmentsOmit<ExtArgs> | null
  /**
   * Filter, which Appointments to fetch.
   */
  where?: Prisma.AppointmentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Appointments to fetch.
   */
  orderBy?: Prisma.AppointmentsOrderByWithRelationInput | Prisma.AppointmentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Appointments.
   */
  cursor?: Prisma.AppointmentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Appointments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Appointments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Appointments.
   */
  distinct?: Prisma.AppointmentsScalarFieldEnum | Prisma.AppointmentsScalarFieldEnum[]
}

/**
 * Appointments findMany
 */
export type AppointmentsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointments
   */
  select?: Prisma.AppointmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointments
   */
  omit?: Prisma.AppointmentsOmit<ExtArgs> | null
  /**
   * Filter, which Appointments to fetch.
   */
  where?: Prisma.AppointmentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Appointments to fetch.
   */
  orderBy?: Prisma.AppointmentsOrderByWithRelationInput | Prisma.AppointmentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Appointments.
   */
  cursor?: Prisma.AppointmentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Appointments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Appointments.
   */
  skip?: number
  distinct?: Prisma.AppointmentsScalarFieldEnum | Prisma.AppointmentsScalarFieldEnum[]
}

/**
 * Appointments create
 */
export type AppointmentsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointments
   */
  select?: Prisma.AppointmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointments
   */
  omit?: Prisma.AppointmentsOmit<ExtArgs> | null
  /**
   * The data needed to create a Appointments.
   */
  data: Prisma.XOR<Prisma.AppointmentsCreateInput, Prisma.AppointmentsUncheckedCreateInput>
}

/**
 * Appointments createMany
 */
export type AppointmentsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Appointments.
   */
  data: Prisma.AppointmentsCreateManyInput | Prisma.AppointmentsCreateManyInput[]
}

/**
 * Appointments update
 */
export type AppointmentsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointments
   */
  select?: Prisma.AppointmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointments
   */
  omit?: Prisma.AppointmentsOmit<ExtArgs> | null
  /**
   * The data needed to update a Appointments.
   */
  data: Prisma.XOR<Prisma.AppointmentsUpdateInput, Prisma.AppointmentsUncheckedUpdateInput>
  /**
   * Choose, which Appointments to update.
   */
  where: Prisma.AppointmentsWhereUniqueInput
}

/**
 * Appointments updateMany
 */
export type AppointmentsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Appointments.
   */
  data: Prisma.XOR<Prisma.AppointmentsUpdateManyMutationInput, Prisma.AppointmentsUncheckedUpdateManyInput>
  /**
   * Filter which Appointments to update
   */
  where?: Prisma.AppointmentsWhereInput
  /**
   * Limit how many Appointments to update.
   */
  limit?: number
}

/**
 * Appointments upsert
 */
export type AppointmentsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointments
   */
  select?: Prisma.AppointmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointments
   */
  omit?: Prisma.AppointmentsOmit<ExtArgs> | null
  /**
   * The filter to search for the Appointments to update in case it exists.
   */
  where: Prisma.AppointmentsWhereUniqueInput
  /**
   * In case the Appointments found by the `where` argument doesn't exist, create a new Appointments with this data.
   */
  create: Prisma.XOR<Prisma.AppointmentsCreateInput, Prisma.AppointmentsUncheckedCreateInput>
  /**
   * In case the Appointments was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AppointmentsUpdateInput, Prisma.AppointmentsUncheckedUpdateInput>
}

/**
 * Appointments delete
 */
export type AppointmentsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointments
   */
  select?: Prisma.AppointmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointments
   */
  omit?: Prisma.AppointmentsOmit<ExtArgs> | null
  /**
   * Filter which Appointments to delete.
   */
  where: Prisma.AppointmentsWhereUniqueInput
}

/**
 * Appointments deleteMany
 */
export type AppointmentsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Appointments to delete
   */
  where?: Prisma.AppointmentsWhereInput
  /**
   * Limit how many Appointments to delete.
   */
  limit?: number
}

/**
 * Appointments findRaw
 */
export type AppointmentsFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Appointments aggregateRaw
 */
export type AppointmentsAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Appointments without action
 */
export type AppointmentsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointments
   */
  select?: Prisma.AppointmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointments
   */
  omit?: Prisma.AppointmentsOmit<ExtArgs> | null
}
