
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Constancys` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Constancys
 * 
 */
export type ConstancysModel = runtime.Types.Result.DefaultSelection<Prisma.$ConstancysPayload>

export type AggregateConstancys = {
  _count: ConstancysCountAggregateOutputType | null
  _min: ConstancysMinAggregateOutputType | null
  _max: ConstancysMaxAggregateOutputType | null
}

export type ConstancysMinAggregateOutputType = {
  id: string | null
  names: string | null
  document: string | null
  documentType: string | null
  phone: string | null
  email: string | null
  constancyType: string | null
  requestReason: string | null
}

export type ConstancysMaxAggregateOutputType = {
  id: string | null
  names: string | null
  document: string | null
  documentType: string | null
  phone: string | null
  email: string | null
  constancyType: string | null
  requestReason: string | null
}

export type ConstancysCountAggregateOutputType = {
  id: number
  names: number
  document: number
  documentType: number
  phone: number
  email: number
  constancyType: number
  requestReason: number
  _all: number
}


export type ConstancysMinAggregateInputType = {
  id?: true
  names?: true
  document?: true
  documentType?: true
  phone?: true
  email?: true
  constancyType?: true
  requestReason?: true
}

export type ConstancysMaxAggregateInputType = {
  id?: true
  names?: true
  document?: true
  documentType?: true
  phone?: true
  email?: true
  constancyType?: true
  requestReason?: true
}

export type ConstancysCountAggregateInputType = {
  id?: true
  names?: true
  document?: true
  documentType?: true
  phone?: true
  email?: true
  constancyType?: true
  requestReason?: true
  _all?: true
}

export type ConstancysAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Constancys to aggregate.
   */
  where?: Prisma.ConstancysWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Constancys to fetch.
   */
  orderBy?: Prisma.ConstancysOrderByWithRelationInput | Prisma.ConstancysOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ConstancysWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Constancys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Constancys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Constancys
  **/
  _count?: true | ConstancysCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ConstancysMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ConstancysMaxAggregateInputType
}

export type GetConstancysAggregateType<T extends ConstancysAggregateArgs> = {
      [P in keyof T & keyof AggregateConstancys]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConstancys[P]>
    : Prisma.GetScalarType<T[P], AggregateConstancys[P]>
}




export type ConstancysGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConstancysWhereInput
  orderBy?: Prisma.ConstancysOrderByWithAggregationInput | Prisma.ConstancysOrderByWithAggregationInput[]
  by: Prisma.ConstancysScalarFieldEnum[] | Prisma.ConstancysScalarFieldEnum
  having?: Prisma.ConstancysScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ConstancysCountAggregateInputType | true
  _min?: ConstancysMinAggregateInputType
  _max?: ConstancysMaxAggregateInputType
}

export type ConstancysGroupByOutputType = {
  id: string
  names: string
  document: string
  documentType: string
  phone: string
  email: string
  constancyType: string
  requestReason: string
  _count: ConstancysCountAggregateOutputType | null
  _min: ConstancysMinAggregateOutputType | null
  _max: ConstancysMaxAggregateOutputType | null
}

type GetConstancysGroupByPayload<T extends ConstancysGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ConstancysGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ConstancysGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConstancysGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConstancysGroupByOutputType[P]>
      }
    >
  >



export type ConstancysWhereInput = {
  AND?: Prisma.ConstancysWhereInput | Prisma.ConstancysWhereInput[]
  OR?: Prisma.ConstancysWhereInput[]
  NOT?: Prisma.ConstancysWhereInput | Prisma.ConstancysWhereInput[]
  id?: Prisma.StringFilter<"Constancys"> | string
  names?: Prisma.StringFilter<"Constancys"> | string
  document?: Prisma.StringFilter<"Constancys"> | string
  documentType?: Prisma.StringFilter<"Constancys"> | string
  phone?: Prisma.StringFilter<"Constancys"> | string
  email?: Prisma.StringFilter<"Constancys"> | string
  constancyType?: Prisma.StringFilter<"Constancys"> | string
  requestReason?: Prisma.StringFilter<"Constancys"> | string
}

export type ConstancysOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  constancyType?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
}

export type ConstancysWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ConstancysWhereInput | Prisma.ConstancysWhereInput[]
  OR?: Prisma.ConstancysWhereInput[]
  NOT?: Prisma.ConstancysWhereInput | Prisma.ConstancysWhereInput[]
  names?: Prisma.StringFilter<"Constancys"> | string
  document?: Prisma.StringFilter<"Constancys"> | string
  documentType?: Prisma.StringFilter<"Constancys"> | string
  phone?: Prisma.StringFilter<"Constancys"> | string
  email?: Prisma.StringFilter<"Constancys"> | string
  constancyType?: Prisma.StringFilter<"Constancys"> | string
  requestReason?: Prisma.StringFilter<"Constancys"> | string
}, "id">

export type ConstancysOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  constancyType?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
  _count?: Prisma.ConstancysCountOrderByAggregateInput
  _max?: Prisma.ConstancysMaxOrderByAggregateInput
  _min?: Prisma.ConstancysMinOrderByAggregateInput
}

export type ConstancysScalarWhereWithAggregatesInput = {
  AND?: Prisma.ConstancysScalarWhereWithAggregatesInput | Prisma.ConstancysScalarWhereWithAggregatesInput[]
  OR?: Prisma.ConstancysScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ConstancysScalarWhereWithAggregatesInput | Prisma.ConstancysScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Constancys"> | string
  names?: Prisma.StringWithAggregatesFilter<"Constancys"> | string
  document?: Prisma.StringWithAggregatesFilter<"Constancys"> | string
  documentType?: Prisma.StringWithAggregatesFilter<"Constancys"> | string
  phone?: Prisma.StringWithAggregatesFilter<"Constancys"> | string
  email?: Prisma.StringWithAggregatesFilter<"Constancys"> | string
  constancyType?: Prisma.StringWithAggregatesFilter<"Constancys"> | string
  requestReason?: Prisma.StringWithAggregatesFilter<"Constancys"> | string
}

export type ConstancysCreateInput = {
  id?: string
  names: string
  document: string
  documentType: string
  phone: string
  email: string
  constancyType: string
  requestReason: string
}

export type ConstancysUncheckedCreateInput = {
  id?: string
  names: string
  document: string
  documentType: string
  phone: string
  email: string
  constancyType: string
  requestReason: string
}

export type ConstancysUpdateInput = {
  names?: Prisma.StringFieldUpdateOperationsInput | string
  document?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  constancyType?: Prisma.StringFieldUpdateOperationsInput | string
  requestReason?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConstancysUncheckedUpdateInput = {
  names?: Prisma.StringFieldUpdateOperationsInput | string
  document?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  constancyType?: Prisma.StringFieldUpdateOperationsInput | string
  requestReason?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConstancysCreateManyInput = {
  id?: string
  names: string
  document: string
  documentType: string
  phone: string
  email: string
  constancyType: string
  requestReason: string
}

export type ConstancysUpdateManyMutationInput = {
  names?: Prisma.StringFieldUpdateOperationsInput | string
  document?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  constancyType?: Prisma.StringFieldUpdateOperationsInput | string
  requestReason?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConstancysUncheckedUpdateManyInput = {
  names?: Prisma.StringFieldUpdateOperationsInput | string
  document?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  constancyType?: Prisma.StringFieldUpdateOperationsInput | string
  requestReason?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConstancysCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  constancyType?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
}

export type ConstancysMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  constancyType?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
}

export type ConstancysMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  names?: Prisma.SortOrder
  document?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  constancyType?: Prisma.SortOrder
  requestReason?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}



export type ConstancysSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  names?: boolean
  document?: boolean
  documentType?: boolean
  phone?: boolean
  email?: boolean
  constancyType?: boolean
  requestReason?: boolean
}, ExtArgs["result"]["constancys"]>



export type ConstancysSelectScalar = {
  id?: boolean
  names?: boolean
  document?: boolean
  documentType?: boolean
  phone?: boolean
  email?: boolean
  constancyType?: boolean
  requestReason?: boolean
}

export type ConstancysOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "names" | "document" | "documentType" | "phone" | "email" | "constancyType" | "requestReason", ExtArgs["result"]["constancys"]>

export type $ConstancysPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Constancys"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    names: string
    document: string
    documentType: string
    phone: string
    email: string
    constancyType: string
    requestReason: string
  }, ExtArgs["result"]["constancys"]>
  composites: {}
}

export type ConstancysGetPayload<S extends boolean | null | undefined | ConstancysDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ConstancysPayload, S>

export type ConstancysCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ConstancysFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ConstancysCountAggregateInputType | true
  }

export interface ConstancysDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Constancys'], meta: { name: 'Constancys' } }
  /**
   * Find zero or one Constancys that matches the filter.
   * @param {ConstancysFindUniqueArgs} args - Arguments to find a Constancys
   * @example
   * // Get one Constancys
   * const constancys = await prisma.constancys.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConstancysFindUniqueArgs>(args: Prisma.SelectSubset<T, ConstancysFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ConstancysClient<runtime.Types.Result.GetResult<Prisma.$ConstancysPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Constancys that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConstancysFindUniqueOrThrowArgs} args - Arguments to find a Constancys
   * @example
   * // Get one Constancys
   * const constancys = await prisma.constancys.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConstancysFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ConstancysFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConstancysClient<runtime.Types.Result.GetResult<Prisma.$ConstancysPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Constancys that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstancysFindFirstArgs} args - Arguments to find a Constancys
   * @example
   * // Get one Constancys
   * const constancys = await prisma.constancys.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConstancysFindFirstArgs>(args?: Prisma.SelectSubset<T, ConstancysFindFirstArgs<ExtArgs>>): Prisma.Prisma__ConstancysClient<runtime.Types.Result.GetResult<Prisma.$ConstancysPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Constancys that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstancysFindFirstOrThrowArgs} args - Arguments to find a Constancys
   * @example
   * // Get one Constancys
   * const constancys = await prisma.constancys.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConstancysFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ConstancysFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConstancysClient<runtime.Types.Result.GetResult<Prisma.$ConstancysPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Constancys that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstancysFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Constancys
   * const constancys = await prisma.constancys.findMany()
   * 
   * // Get first 10 Constancys
   * const constancys = await prisma.constancys.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const constancysWithIdOnly = await prisma.constancys.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ConstancysFindManyArgs>(args?: Prisma.SelectSubset<T, ConstancysFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConstancysPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Constancys.
   * @param {ConstancysCreateArgs} args - Arguments to create a Constancys.
   * @example
   * // Create one Constancys
   * const Constancys = await prisma.constancys.create({
   *   data: {
   *     // ... data to create a Constancys
   *   }
   * })
   * 
   */
  create<T extends ConstancysCreateArgs>(args: Prisma.SelectSubset<T, ConstancysCreateArgs<ExtArgs>>): Prisma.Prisma__ConstancysClient<runtime.Types.Result.GetResult<Prisma.$ConstancysPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Constancys.
   * @param {ConstancysCreateManyArgs} args - Arguments to create many Constancys.
   * @example
   * // Create many Constancys
   * const constancys = await prisma.constancys.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ConstancysCreateManyArgs>(args?: Prisma.SelectSubset<T, ConstancysCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Constancys.
   * @param {ConstancysDeleteArgs} args - Arguments to delete one Constancys.
   * @example
   * // Delete one Constancys
   * const Constancys = await prisma.constancys.delete({
   *   where: {
   *     // ... filter to delete one Constancys
   *   }
   * })
   * 
   */
  delete<T extends ConstancysDeleteArgs>(args: Prisma.SelectSubset<T, ConstancysDeleteArgs<ExtArgs>>): Prisma.Prisma__ConstancysClient<runtime.Types.Result.GetResult<Prisma.$ConstancysPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Constancys.
   * @param {ConstancysUpdateArgs} args - Arguments to update one Constancys.
   * @example
   * // Update one Constancys
   * const constancys = await prisma.constancys.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ConstancysUpdateArgs>(args: Prisma.SelectSubset<T, ConstancysUpdateArgs<ExtArgs>>): Prisma.Prisma__ConstancysClient<runtime.Types.Result.GetResult<Prisma.$ConstancysPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Constancys.
   * @param {ConstancysDeleteManyArgs} args - Arguments to filter Constancys to delete.
   * @example
   * // Delete a few Constancys
   * const { count } = await prisma.constancys.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ConstancysDeleteManyArgs>(args?: Prisma.SelectSubset<T, ConstancysDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Constancys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstancysUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Constancys
   * const constancys = await prisma.constancys.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ConstancysUpdateManyArgs>(args: Prisma.SelectSubset<T, ConstancysUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Constancys.
   * @param {ConstancysUpsertArgs} args - Arguments to update or create a Constancys.
   * @example
   * // Update or create a Constancys
   * const constancys = await prisma.constancys.upsert({
   *   create: {
   *     // ... data to create a Constancys
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Constancys we want to update
   *   }
   * })
   */
  upsert<T extends ConstancysUpsertArgs>(args: Prisma.SelectSubset<T, ConstancysUpsertArgs<ExtArgs>>): Prisma.Prisma__ConstancysClient<runtime.Types.Result.GetResult<Prisma.$ConstancysPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Constancys that matches the filter.
   * @param {ConstancysFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const constancys = await prisma.constancys.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.ConstancysFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Constancys.
   * @param {ConstancysAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const constancys = await prisma.constancys.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.ConstancysAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Constancys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstancysCountArgs} args - Arguments to filter Constancys to count.
   * @example
   * // Count the number of Constancys
   * const count = await prisma.constancys.count({
   *   where: {
   *     // ... the filter for the Constancys we want to count
   *   }
   * })
  **/
  count<T extends ConstancysCountArgs>(
    args?: Prisma.Subset<T, ConstancysCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ConstancysCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Constancys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstancysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ConstancysAggregateArgs>(args: Prisma.Subset<T, ConstancysAggregateArgs>): Prisma.PrismaPromise<GetConstancysAggregateType<T>>

  /**
   * Group by Constancys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstancysGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ConstancysGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConstancysGroupByArgs['orderBy'] }
      : { orderBy?: ConstancysGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ConstancysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConstancysGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Constancys model
 */
readonly fields: ConstancysFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Constancys.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConstancysClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Constancys model
 */
export interface ConstancysFieldRefs {
  readonly id: Prisma.FieldRef<"Constancys", 'String'>
  readonly names: Prisma.FieldRef<"Constancys", 'String'>
  readonly document: Prisma.FieldRef<"Constancys", 'String'>
  readonly documentType: Prisma.FieldRef<"Constancys", 'String'>
  readonly phone: Prisma.FieldRef<"Constancys", 'String'>
  readonly email: Prisma.FieldRef<"Constancys", 'String'>
  readonly constancyType: Prisma.FieldRef<"Constancys", 'String'>
  readonly requestReason: Prisma.FieldRef<"Constancys", 'String'>
}
    

// Custom InputTypes
/**
 * Constancys findUnique
 */
export type ConstancysFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constancys
   */
  select?: Prisma.ConstancysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constancys
   */
  omit?: Prisma.ConstancysOmit<ExtArgs> | null
  /**
   * Filter, which Constancys to fetch.
   */
  where: Prisma.ConstancysWhereUniqueInput
}

/**
 * Constancys findUniqueOrThrow
 */
export type ConstancysFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constancys
   */
  select?: Prisma.ConstancysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constancys
   */
  omit?: Prisma.ConstancysOmit<ExtArgs> | null
  /**
   * Filter, which Constancys to fetch.
   */
  where: Prisma.ConstancysWhereUniqueInput
}

/**
 * Constancys findFirst
 */
export type ConstancysFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constancys
   */
  select?: Prisma.ConstancysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constancys
   */
  omit?: Prisma.ConstancysOmit<ExtArgs> | null
  /**
   * Filter, which Constancys to fetch.
   */
  where?: Prisma.ConstancysWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Constancys to fetch.
   */
  orderBy?: Prisma.ConstancysOrderByWithRelationInput | Prisma.ConstancysOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Constancys.
   */
  cursor?: Prisma.ConstancysWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Constancys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Constancys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Constancys.
   */
  distinct?: Prisma.ConstancysScalarFieldEnum | Prisma.ConstancysScalarFieldEnum[]
}

/**
 * Constancys findFirstOrThrow
 */
export type ConstancysFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constancys
   */
  select?: Prisma.ConstancysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constancys
   */
  omit?: Prisma.ConstancysOmit<ExtArgs> | null
  /**
   * Filter, which Constancys to fetch.
   */
  where?: Prisma.ConstancysWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Constancys to fetch.
   */
  orderBy?: Prisma.ConstancysOrderByWithRelationInput | Prisma.ConstancysOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Constancys.
   */
  cursor?: Prisma.ConstancysWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Constancys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Constancys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Constancys.
   */
  distinct?: Prisma.ConstancysScalarFieldEnum | Prisma.ConstancysScalarFieldEnum[]
}

/**
 * Constancys findMany
 */
export type ConstancysFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constancys
   */
  select?: Prisma.ConstancysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constancys
   */
  omit?: Prisma.ConstancysOmit<ExtArgs> | null
  /**
   * Filter, which Constancys to fetch.
   */
  where?: Prisma.ConstancysWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Constancys to fetch.
   */
  orderBy?: Prisma.ConstancysOrderByWithRelationInput | Prisma.ConstancysOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Constancys.
   */
  cursor?: Prisma.ConstancysWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Constancys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Constancys.
   */
  skip?: number
  distinct?: Prisma.ConstancysScalarFieldEnum | Prisma.ConstancysScalarFieldEnum[]
}

/**
 * Constancys create
 */
export type ConstancysCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constancys
   */
  select?: Prisma.ConstancysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constancys
   */
  omit?: Prisma.ConstancysOmit<ExtArgs> | null
  /**
   * The data needed to create a Constancys.
   */
  data: Prisma.XOR<Prisma.ConstancysCreateInput, Prisma.ConstancysUncheckedCreateInput>
}

/**
 * Constancys createMany
 */
export type ConstancysCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Constancys.
   */
  data: Prisma.ConstancysCreateManyInput | Prisma.ConstancysCreateManyInput[]
}

/**
 * Constancys update
 */
export type ConstancysUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constancys
   */
  select?: Prisma.ConstancysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constancys
   */
  omit?: Prisma.ConstancysOmit<ExtArgs> | null
  /**
   * The data needed to update a Constancys.
   */
  data: Prisma.XOR<Prisma.ConstancysUpdateInput, Prisma.ConstancysUncheckedUpdateInput>
  /**
   * Choose, which Constancys to update.
   */
  where: Prisma.ConstancysWhereUniqueInput
}

/**
 * Constancys updateMany
 */
export type ConstancysUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Constancys.
   */
  data: Prisma.XOR<Prisma.ConstancysUpdateManyMutationInput, Prisma.ConstancysUncheckedUpdateManyInput>
  /**
   * Filter which Constancys to update
   */
  where?: Prisma.ConstancysWhereInput
  /**
   * Limit how many Constancys to update.
   */
  limit?: number
}

/**
 * Constancys upsert
 */
export type ConstancysUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constancys
   */
  select?: Prisma.ConstancysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constancys
   */
  omit?: Prisma.ConstancysOmit<ExtArgs> | null
  /**
   * The filter to search for the Constancys to update in case it exists.
   */
  where: Prisma.ConstancysWhereUniqueInput
  /**
   * In case the Constancys found by the `where` argument doesn't exist, create a new Constancys with this data.
   */
  create: Prisma.XOR<Prisma.ConstancysCreateInput, Prisma.ConstancysUncheckedCreateInput>
  /**
   * In case the Constancys was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ConstancysUpdateInput, Prisma.ConstancysUncheckedUpdateInput>
}

/**
 * Constancys delete
 */
export type ConstancysDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constancys
   */
  select?: Prisma.ConstancysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constancys
   */
  omit?: Prisma.ConstancysOmit<ExtArgs> | null
  /**
   * Filter which Constancys to delete.
   */
  where: Prisma.ConstancysWhereUniqueInput
}

/**
 * Constancys deleteMany
 */
export type ConstancysDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Constancys to delete
   */
  where?: Prisma.ConstancysWhereInput
  /**
   * Limit how many Constancys to delete.
   */
  limit?: number
}

/**
 * Constancys findRaw
 */
export type ConstancysFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Constancys aggregateRaw
 */
export type ConstancysAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Constancys without action
 */
export type ConstancysDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constancys
   */
  select?: Prisma.ConstancysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constancys
   */
  omit?: Prisma.ConstancysOmit<ExtArgs> | null
}
